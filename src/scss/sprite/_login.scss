/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$psw-name: 'psw';
$psw-x: 68px;
$psw-y: 0px;
$psw-offset-x: -68px;
$psw-offset-y: 0px;
$psw-width: 22px;
$psw-height: 21px;
$psw-total-width: 90px;
$psw-total-height: 67px;
$psw-image: '../img/sprite/login.png';
$psw: (68px, 0px, -68px, 0px, 22px, 21px, 90px, 67px, '../img/sprite/login.png', 'psw', );
$user1-name: 'user1';
$user1-x: 0px;
$user1-y: 0px;
$user1-offset-x: 0px;
$user1-offset-y: 0px;
$user1-width: 66px;
$user1-height: 67px;
$user1-total-width: 90px;
$user1-total-height: 67px;
$user1-image: '../img/sprite/login.png';
$user1: (0px, 0px, 0px, 0px, 66px, 67px, 90px, 67px, '../img/sprite/login.png', 'user1', );
$user2-name: 'user2';
$user2-x: 68px;
$user2-y: 23px;
$user2-offset-x: -68px;
$user2-offset-y: -23px;
$user2-width: 22px;
$user2-height: 21px;
$user2-total-width: 90px;
$user2-total-height: 67px;
$user2-image: '../img/sprite/login.png';
$user2: (68px, 23px, -68px, -23px, 22px, 21px, 90px, 67px, '../img/sprite/login.png', 'user2', );
$psw-2x-name: 'psw@2x';
$psw-2x-x: 136px;
$psw-2x-y: 0px;
$psw-2x-offset-x: -136px;
$psw-2x-offset-y: 0px;
$psw-2x-width: 44px;
$psw-2x-height: 42px;
$psw-2x-total-width: 180px;
$psw-2x-total-height: 134px;
$psw-2x-image: '../img/sprite/login@2x.png';
$psw-2x: (136px, 0px, -136px, 0px, 44px, 42px, 180px, 134px, '../img/sprite/login@2x.png', 'psw@2x', );
$user1-2x-name: 'user1@2x';
$user1-2x-x: 0px;
$user1-2x-y: 0px;
$user1-2x-offset-x: 0px;
$user1-2x-offset-y: 0px;
$user1-2x-width: 132px;
$user1-2x-height: 134px;
$user1-2x-total-width: 180px;
$user1-2x-total-height: 134px;
$user1-2x-image: '../img/sprite/login@2x.png';
$user1-2x: (0px, 0px, 0px, 0px, 132px, 134px, 180px, 134px, '../img/sprite/login@2x.png', 'user1@2x', );
$user2-2x-name: 'user2@2x';
$user2-2x-x: 136px;
$user2-2x-y: 46px;
$user2-2x-offset-x: -136px;
$user2-2x-offset-y: -46px;
$user2-2x-width: 44px;
$user2-2x-height: 42px;
$user2-2x-total-width: 180px;
$user2-2x-total-height: 134px;
$user2-2x-image: '../img/sprite/login@2x.png';
$user2-2x: (136px, 46px, -136px, -46px, 44px, 42px, 180px, 134px, '../img/sprite/login@2x.png', 'user2@2x', );
$spritesheet-width: 90px;
$spritesheet-height: 67px;
$spritesheet-image: '../img/sprite/login.png';
$spritesheet-sprites: ($psw, $user1, $user2, );
$spritesheet: (90px, 67px, '../img/sprite/login.png', $spritesheet-sprites, );
$retina-spritesheet-width: 180px;
$retina-spritesheet-height: 134px;
$retina-spritesheet-image: '../img/sprite/login@2x.png';
$retina-spritesheet-sprites: ($psw-2x, $user1-2x, $user2-2x, );
$retina-spritesheet: (180px, 134px, '../img/sprite/login@2x.png', $retina-spritesheet-sprites, );

/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
$psw-group-name: 'psw';
$psw-group: ('psw', $psw, $psw-2x, );
$user1-group-name: 'user1';
$user1-group: ('user1', $user1, $user1-2x, );
$user2-group-name: 'user2';
$user2-group: ('user2', $user2, $user2-2x, );
$retina-groups: ($psw-group, $user1-group, $user2-group, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
@mixin sprite-background-size($sprite) {
  $sprite-total-width: nth($sprite, 7);
  $sprite-total-height: nth($sprite, 8);
  background-size: $sprite-total-width $sprite-total-height;
}

@mixin retina-sprite($retina-group) {
  $normal-sprite: nth($retina-group, 2);
  $retina-sprite: nth($retina-group, 3);
  @include sprite($normal-sprite);

  @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    @include sprite-image($retina-sprite);
    @include sprite-background-size($normal-sprite);
  }
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
@mixin retina-sprites($retina-groups) {
  @each $retina-group in $retina-groups {
    $sprite-name: nth($retina-group, 1);
    .#{$sprite-name} {
      @include retina-sprite($retina-group);
    }
  }
}
